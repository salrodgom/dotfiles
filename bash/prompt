#!/bin/bash
prompt_git() {
	local s='';
	local branchName='';
	local remoteName='';
	local ahead_count='';
	local behind_count='';

	# Check if the current directory is in a Git repository.
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

			# Ensure the index is up to date.
			git update-index --really-refresh -q &>/dev/null;

			# Check for uncommitted changes in the index.
			if ! $(git diff --quiet --ignore-submodules --cached); then
				s+='+';
			fi;

			# Check for unstaged changes.
			if ! $(git diff-files --quiet --ignore-submodules --); then
				s+='!';
			fi;

			# Check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+='?';
			fi;

			# Check for stashed files.
			if $(git rev-parse --verify refs/stash &>/dev/null); then
				s+='$';
			fi;

		fi;

		# Get the short symbolic ref.
		# If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up.
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo '(unknown)')";

		# Check ahead/behind commits status
		remoteName=$(git rev-parse --abbrev-ref "@{upstream}" 2> /dev/null || echo '(unknown)')
		ahead_count=$(git rev-list --left-right ${branchName}...${remoteName} 2> /dev/null | grep -c '^<')
    behind_count=$(git rev-list --left-right ${branchName}...${remoteName} 2> /dev/null | grep -c '^>')
    if [[ "$ahead_count" > 0 ]]; then
      if [[ "$s" == "" ]]; then
        s+='↑'$ahead_count;
      else
        s+=' ↑'$ahead_count;
      fi
    fi
    if [[ "$behind_count" > 0 ]]; then
      if [[ "$s" == "" ]]; then
			  s+='↓'$behind_count;
      else
			  s+=' ↓'$behind_count;
      fi
    fi

		[ -n "${s}" ] && s=" [${s}]";

		echo -e "${1}${branchName}${orange}${s}";
	else
		return;
	fi;
}
prompt_desk() {
	local s='';
        local deskfile=$(desk | head -n 1);

	# Check if the shell has loaded a deskfile
	if [ "$deskfile" == 'No desk activated.' ]; then
		return;
	else
		echo -e "${1}{"$deskfile"}";
	fi;
}
tput sgr0;
bold=$(tput bold);
reset=$(tput sgr0);
black=$(tput setaf 0);
blue=$(tput setaf 33);
cyan=$(tput setaf 37);
green=$(tput setaf 64);
orange=$(tput setaf 166);
purple=$(tput setaf 125);
red=$(tput setaf 124);
violet=$(tput setaf 61);
white=$(tput setaf 15);
yellow=$(tput setaf 136);
smerald=$(tput setaf 6);
if [[ "${USER}" == "root" ]]; then
	userStyle="${red}";
else
	userStyle="${orange}";
fi;
if [[ "${SSH_TTY}" ]]; then
	hostStyle="${red}";
else
	hostStyle="${yellow}";
fi;
PS1="\[\033]0;\w\007\]";
PS1+="\[\]\n";
PS1+="┌╼ \[${userStyle}\]\u";
PS1+="\[${reset}\]@";
PS1+="\[${hostStyle}\]\h";
PS1+="\[${reset}\](\@ \d)"
PS1+="\$(prompt_git \"${white} on ${yellow}\")"; # Git repository details
PS1+="\$(prompt_desk \"${white} desk ${orange}\")"; # Desk files details
PS1+="\n";
PS1+="\[${reset}├───╼ \]\[${blue}\w\] ";
PS1+="\[${reset}\$(/bin/ls -1 | /usr/bin/wc -l | /bin/sed 's: ::g') files, \$(/bin/ls -lah | /bin/grep -m 1 total | /bin/sed 's/total //')b";
PS1+="\n";
PS1+="└──────╼ \[${reset}\]";
export PS1;
